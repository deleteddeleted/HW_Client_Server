1) Клиент-серверная архитектура

Это такая архитектура, в которой сетевая нагрузка распределяется между поставщиками услуг, которые называются серверами, и заказчиками услуг, которые называются клиентами.
Клиент и сервер - это некое ПО. Обычно эти программы расположены на разных вычислительных машинах и взаимодействуют между собой через сетевые протоколы, но такжеклиент и сервер могут располагаться на одной машине. Самый распространенный протокол это HTTP. Клиент-
серверная архитектура построена, в основном, на взаимодействии через данный вид протокола. 
 Архитектура взаимодействия между клиентом и сервером подразделяется на два вида:
·         двухзвенная. Сторонние ресурсы не задействованы. Одна машина обрабатывает поступившие сообщения. В этом случае сервер должен быть высокопроизводительным. Несмотря на эти жесткие требования, архитектура очень надежная. Первый уровень – клиент отправляет запрос. Второй уровень – сервером принимается сообщение, обрабатывается и отправляется ответ.
·         многоуровневая. Речь идет о любой современной архитектуре СУБД. Принципиальное отличие и особенность: запросом клиента занимаются одновременно несколько серверных устройств. Операции перераспределяются, нагрузка на серверную машину снижена и оптимальная. Единственный минус: низкая надежность по сравнению с предыдущим вариантом. 

2) HTTP и HTTPS
HTTP (от англ. HyperText Transfer Protocol) ? это протокол передачи данных в интернете. С его помощью браузер получает информацию от сервера и показывает пользователю контент. 
HTTPS (от англ. HyperText Transfer Protocol Secure) ? защищённый протокол передачи данных в интернете. Это тот же протокол HTTP, но защищенный SSL-сертификатом.
HTTP – является открытым протоколом передачи данных, а HTTPS – закрытым и имеет надстройку шифрования. Первый по умолчанию использует 80 порт и никак не отображается в браузере, второй – 443, а его название отображается в браузере возле домена с пометкой серого значка замочка. 

3)HTTP методы
Get - Запрашивает содержимое конкретного ресурса, получает данные и никак не должен изменять эти данные.
Head - Похож на GET, но не возвращает тело ответа, а только стартовую строку и заголовки. Используется для получения метаданных, а также проверки и валидации ресурса.
POST  - используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
PUT  - заменяет все текущие представления ресурса данными запроса.
DELETE - удаляет указанный ресурс.
connect - CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS - используется для описания параметров соединения с ресурсом.
PATCH - используется для частичного изменения ресурса.
TRACE - выполняет вызов возвращаемого тестового сообщения с ресурса.

4) HTTP статус коды сервера
Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Коды сгруппированы в 5 классов:
    1.Информационные 100 - 199
    2.Успешные 200 - 299
    3.Перенаправления 300 - 399
    4.Клиентские ошибки 400 - 499
    5.Серверные ошибки 500 - 599
100 Continue — Сервер удовлетворён начальными сведениями о запросе, клиент может продолжать пересылать заголовки.
101 Switching Protocols — Сервер предлагает перейти на более подходящий для указанного ресурса протокол; список предлагаемых протоколов сервер обязательно указывает в поле заголовка Update. Если клиента это заинтересует, то он посылает новый запрос с указанием другого протокола. 
102 Processing — Запрос принят, но на его обработку понадобится длительное время. Используется сервером, чтобы клиент не разорвал соединение из — за превышения времени ожидания. Клиент при получении такого ответа должен сбросить таймер и дожидаться следующей команды в обычном режиме. 
200 OK — Успешный запрос.
202 Accepted — Запрос был принят на обработку, но она не завершена.
203 Non — Authoritative Information — Аналогично ответу 200, но в этом случае передаваемая информация была взята не из первичного источника (резервной копии, другого сервера и т. д.) и поэтому может быть неактуальной.
204 No Content — Сервер успешно обработал запрос, но в ответе были переданы только заголовки без тела сообщения. Клиент не должен обновлять содержимое документа, но может применить к нему полученные метаданные.
205 Reset Content — Сервер обязывает клиента сбросить введённые пользователем данные. Тела сообщения сервер при этом не передаёт и документ обновлять не обязательно.
206 Partial Content — Сервер удачно выполнил частичный GET — запрос, возвратив только часть сообщения. В заголовке Content — Range сервер указывает байтовые диапазоны содержимого. Особое внимание при работе с подобными ответами следует уделить кэшированию.
301 Moved Permanently — Перемещёно окончательно.Запрошенный ресурс был окончательно перемещен на URI, указанный в строке заголовка Location, ответа сервера. Некоторые клиенты, при обработке данного кода, ведут себя некорректно.
302 Found — Данный код статуса сообщает клиенту, что ресурс временно доступен по другому URI, указанному в строке заголовка Location, заголовка ответа сервера. Данный код используется например, при согласовании содержимого ( Content Negotiation ), выполняемого сервером.
303 See Other — Смотреть другое. Документ из запрошенного URI, нужно запросить по адресу, указанному в строке заголовка Location, заголовка ответа сервера, используя метод GET, невзирая на то, каким методом был сделан первый запрос.
304 Not Modified — Не изменялось. Данный код выдается в случае запроса документа, методом GET, с использованием заголовков If — Modified — Since или If — None — Match, и документ не был изменен с указанного момента времени.
305 Use Proxy — Использовать прокси сервер. Запрос к ресурсу, должен выполняться через прокси — сервер., адрес которого, указан в строке заголовка Location, заголовка ответа сервера.
307 Temporary Redirect — Временное перенаправление. Запрошенный ресурс временно доступен по URI, указанному в строке заголовка Location, заголовка ответа сервера.
400 ошибка - Плохой запрос. Из — за синтаксической ошибки, запрос не был понят сервером.
401 - Неавторизованно". Для получения запрашиваемого ответа нужна аутентификация. 
403 - "Запрещено". У клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ. 
404 - когда наш клиент обращается к ресурсу, которого уже нет на сервере.
500 - если мы видим эту ошибку, то мы обязательно должны завести баг - critical или blocker, т.е. в данном случае что-то произошло на сервере, какая-то фатальная ошибка, которая не позволяет ему ответить на ваш запрос, поэтому это очень серьезно для нашего программного обеспечения.
500 Internal Server Error — Внутренняя ошибка сервера. Любая внутренняя ошибка на стороне сервера не подпадающая под остальные ошибки из категории 5хх.
501 Not Implemented — Не реализовано. Сервер не поддерживает, необходимых для обработки запроса, возможностей. ( например не поддерживается необходимый метод обработки ).
502 Bad Gateway — Плохой шлюз. Сервер, работающий в качестве прокси или шлюза, получил сообщение о неудачное в промежуточной операции.
503 Service Unavailable — Сервис недоступен. Сервер не в состоянии обрабатывать запросы клиентов по техническим причинам.
504 Gateway Timeout — Истек тайм-аут ожидания ответа шлюза. Проксирующий сервер или шлюз, не дождался ответа от вышестоящего сервера для завершения обработки запроса.

5) Ядро браузера 
Это программа, которая берет нашу страничку*, ее стили и преобразуте ее в изображение на экране.Браузерный движок используется в программах, предназначенных для отображения и редактировании содержимого веб-страниц, а именно: веб-браузерах, почтовых клиентах и других.
*имеется в виду содержимое веб-страниц: файлы HTML, XML, изображения и другое.

6) Какие браузеры какие ядра используют
Браузер— это оболочка для браузерного движка со своими дополнительными программными надстройками.Разные браузеры могут работать на одном браузерном движке
 Основные браузерные движки
    Trident — движок Microsoft Internet Explorer, Slim Browser,GreenBrowser
    Gecko — открытый движок проекта Mozilla. Используется в браузере Firefox, почтовом клиенте Thunderbird и других.
    EdgeHTML — движок от компании Microsoft для браузера Microsoft Edge.
    WebKit — движок для браузера Apple Safari.
    Blink — движок браузера Google Chrome, Яндекс.Браузер, Opera,Microsoft Edge

7) Что такое API
Это совокупность инструментов и функций в виде интерфейса для создания новых приложений, благодаря которому одна программа будет взаимодействовать с другой. Обмен информацией выполняется в строго оговоренном формате, что позволяет взаимодействовать системам с абсолютно несовместимыми конфигурациями (написанным на разных языках программирования, расположенных локально или удалённо и т.п.).

8) Что такое эндпоинты
Эндпоинт (Endpoint - конечная точка) — это само обращение к маршруту отдельным HTTP методом. Эндпоинт выполняют конкретную задачу, принимают параметры и возвращают данные Клиенту.

9) URL (URI, URL, URN)
URL (Uniform Resource Locator) – адрес ресурса в сети, определяет местонахождение и способ обращения к нему
URN (Uniform Resource Name) – имя ресурса в сети, определяет только название ресурса, но не говорит как к нему подключиться
URN (Uniform Resource Identifier) – имя ресурса в сети, определяет только название ресурса, но не говорит как к нему подключиться

10) Идемпотентные HTTP методы
Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций. Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные методы являются идемпотентными.

11) Безопасные HTTP методы
Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются также идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или DELETE.

12) Идентификация, Аутентификация, Авторизация
Идентификация — это процедура распознавания субъекта по его идентификатору (проще говоря, это определение имени, логина или номера). пример: Сначала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это идентификация.
Аутентификация – это процедура проверки подлинности (пользователя проверяют с помощью пароля, письмо проверяют по электронной подписи и т.д.) Пример : Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь действительно настоящий, ведь пароль совпал, — это аутентификация. Google дополнительно спросит еще и одноразовый код из SMS или приложения. Если пользователь и его правильно введет, то система окончательно согласится с тем, что он настоящий владелец аккаунта, — это двухфакторная аутентификация.
Авторизация – это предоставление доступа к какому-либо ресурсу. Пример: После этого система предоставит пользователю право читать письма в его почтовом ящике и все остальное — это авторизация.

13) Что такое IP
IP-адрес - это уникальный сетевой адрес узла в компьютерной сети, построенный по протоколу ip. 

14) Что такое октеты в DNS
IP-адрес компьютера записывается в 32 разрядах (4 октета). Каждый октет содержит десятичное число от 0 до 255 (в двоичном виде запись представляет последовательность 0 и 1).Каждый октет записывают в десятичном формате, и форма записи IP адреса следующая: четыре октета разделенных точкой (213.180.193.3). 

15) Что такое порт, сколько портов у Linux сервера
Порт есть виртуальная точка, в которой сетевые соединения начинаются и заканчиваются. Порты основаны на программном обеспечении и управляются операционной системой компьютера. Каждый порт связан с определенным процессом или службой.

Номера портов делятся на три диапазоны: Известные порты: от 0 до 1023. Зарегистрированные порты: от 1024 до 49151. Динамические и / или частные порты: от 49152 до 65535.


16) Уровни OSI
Модель OSI (или Open System Interconnection) характеризует взаимодействие сетевого оборудования. Иными словами, посредством неё общаются такие устройства, как ПК с сетевыми картами, коммутаторы, роутеры. “эталонная модель OSI”. Эталонная модель описывает, какие уровни должны быть в сети и какие функции выполняются на каждом из уровней. OSI модель разделяет все протоколы на 7 таких уровней:
1 уровень Физический (physical). Единицей нагрузки (PDU) здесь является бит. Кроме единиц и нулей физический уровень не знает ничего. На этом уровне работают провода, патч панели, сетевые концентраторы (хабы, которые сейчас уже сложно найти в привычных нам сетях), сетевые адаптеры. Именно сетевые адаптеры и ничего более из компьютера. Сам сетевой адаптер принимает последовательность бит и передает её дальше.
2 уровень. Канальный (data link).  После получения сигнала с предыдущего физического уровня, на следующем (канальном) уровне происходит проверка и исправление погрешностей передачи. Здесь появляются термины «фрейм» и «MAC-адрес». MAC адреса занимают 48 бит в шестнадцатиричном формате и могут записываться, например, таким образом: 00:26:57:00:1f:02.
Второй уровень более сложный, чем предыдущий, физический. В нём условно выделяют следующие подуровни управления:
    LLC (логическим каналом)
    MAC (доступом к среде)
Устройствами второго, канального, уровня считаются мосты и коммутаторы. 
3 уровень. Сетевой (network). Над канальным уровнем находится следующий – сетевой. На этой ступени вводятся понятия «маршрутизация» и «IP-адрес». Для трансформации MAC-адресов в IP применяется протокол ARP.
Здесь осуществляется маршрутизация трафика. Когда пользователь, к примеру, желает перейти на сайт и вводит его адрес, отправляется DNS-запрос. Ответом на него будет IP-адрес, который подставляется в пакет. Пакет данных – это новый термин, который появляется на 3-м сетевом уровне.
Устройствами здесь являются роутер или маршрутизатор. 
4 уровень. Транспортный (transport).происходит доставка информации по каналам внешней сети. Блоки данных в данном случае делятся на отдельные фрагменты, размеры которых будут зависеть от используемого протокола. Для транспортного уровня это TCP и UDP. Какой из них лучше использовать, зависит от типа передаваемых данных.
TCP (Transmission Control Protocol) – протокол, хорошо подходящий для передачи трафика, для которого любые потери пакетов чувствительны. Процесс передачи контролируется, благодаря чему потерянные пакеты будут обнаружены и запрошены повторно. UDP (User Datagram Protocol) применяется, когда потеря нескольких пакетов не принципиальна. Например, при передаче видео, изображений. 
5 уровень. Сеансовый (session).  Сеансовый уровень в ответе за организацию сеансов связи между приложениями на компьютерах. Он отвечает за создание и окончание сеанса, обмен данными, за синхронизацию и другие процессы.
К протоколам сеансового уровня, например, относятся X.225, ISO 8327, SMPP (через него отправляются СМС сообщения), PAP. 
6 уровень. Представительский (presentation). На шестой ступени осуществляется преобразование форматов данных, например, сжатие и кодирование. 
7 уровень. Прикладной (application). Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), для работы с почтовыми службами (SMTP, POP3), для передачи файлов (FTP, TFTP) и другие.
Когда осуществляется передача с верхнего на нижний, это именуется инкапсуляцией данных, а в обратном порядке – декапсуляцией. 

17) Хедеры http запросов
Заголовки – это специальные параметры, которые несут определенную служебную информацию о соединении по HTTP. Некоторые заголовки имеют лишь информационный характер для пользователя или для компьютера, другие передают определенные команды, исходя из которых, сервер или клиент будет выполнять какие-то действия.

В зависимости от того, где эти заголовки могут находиться, они разделяются на:
General Headers (Основные заголовки) — должны быть и в запросах и в ответах клиента и сервера.
Request Headers (Заголовки запроса) — используются только в запросах клиента.
Response Headers (Заголовки ответа) — используются только в ответах сервера.
Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.




